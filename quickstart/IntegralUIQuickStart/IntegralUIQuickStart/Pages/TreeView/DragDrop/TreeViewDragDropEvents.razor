@page "/treeview/dragdrop/events"

<link rel="stylesheet" href="css/treeview/dragdrop/TreeViewDragDropEvents.css?version=24.3.0" />

<h2>TreeView / Drag Drop Events</h2>
<div class="sample-block">
    <div class="sample-block-treeview-dragdrop-events">
        <IntegralUITreeView Id="@getTreeId()" TItem="CustomItem"
            AllowDrag="true"
            AllowDrop="true"
            Items="@items"
            MouseWheelSpeed="IntegralUISpeedMode.VerySlow"
            DragStart="@treeDragStart"
            DragEnter="@treeDragEnter"
            DragOver="@treeDragOver"
            DragLeave="@treeDragLeave"
            DragDrop="@treeDragDrop"
            DragEnd="@treeDragEnd">
            <ItemTemplate>
                <span class="@getIconClass(@context.Item)"></span>
                <span>@context.Item?.Text</span>
            </ItemTemplate>
        </IntegralUITreeView>
        <div class="sample-event-block">
            <IntegralUIButton Id="treeview-dragdrop-events-button" AllowFocus="false" Click="@clearEventLog">Clear</IntegralUIButton>
            <p>Event log:</p>
            <IntegralUIList @ref=evList Id="list-dragdrop-events-log" TItem="DDEventItem"
                AllowFocus="false"
                Items="@evItems"
                MouseWheelSpeed="IntegralUISpeedMode.VerySlow">
                <ItemTemplate>
                    <div>
                        @if (@context.Item?.Count > 0)
                        {
                            <span class="sample-event-count">@context.Item.Count</span>
                        }
                        <span class="sample-event-name">@context.Item?.Name</span>
                        @if (@context.Item is not null && @context.Item.Cancelled)
                        {
                            <span class="sample-event-cancelled"> cancelled</span>
                        }
                    </div>
                    <div>
                        @context.Item?.Info
                        @if (@context.Item?.Position >= 0)
                        {
                            <span class="sample-event-value"> at position: @context.Item.Position</span>
                        }
                    </div>
                </ItemTemplate>
            </IntegralUIList>
        </div>
    </div>
    <div class="feature-help">
        <p><span class="initial-space"></span>In this demo, you are free to drag and drop items one by one within the TreeView. When item is dragged over a different item, you can drop it as a child, above or below the target item. To create an item copy, press and hold the SHIFT key when item drops.</p>
        <p><span class="initial-space"></span>To see which event is fired and in what order, the list on right logs all drag and drop events that occur, from newest to the oldest event fired. The list shows event name, information about the source and target item, position and how many times the event fires.</p>
        <p><span class="initial-space"></span>Here is a list of available drag and drop events:</p>
        <ul class="feature-points">
            <li><span class="code-name">DragEnd</span> - occurs when drag and drop ends over TreeView space</li>
            <li><span class="code-name">DragEnter</span> - occurs when item is dragged over TreeView space for the first time</li>
            <li><span class="code-name">DragDrop</span> - occurs when item drops within the TreeView</li>
            <li><span class="code-name">DragLeave</span> - occurs when dragged item leaves the TreeView space</li>
            <li><span class="code-name">DragOver</span> - occurs when item is dragged over other items and TreeView space</li>
            <li><span class="code-name">DragStart</span> - occurs  when drag and drop starts over TreeView space</li>
        </ul>
    </div>
</div>

@code {
    private string? treeId = string.Empty;

    public class CustomItem
    {
        public bool Expanded { get; set; } = true;
        public string? Id { get; set; }
        public string? Icon { get; set; }
        public List<CustomItem> Items { get; set; } = [];
        public string? ParentId { get; set; }
        public bool Selected { get; set; } = false;
        public string? Text { get; set; }
    }

    public List<CustomItem> items = new()
    {
        new CustomItem
        {
            Id = "1",
            Text = "Favorites",
            Items = new()
            {
                new CustomItem { Id = "11", ParentId = "1", Text = "Desktop" },
                new CustomItem { Id = "12", ParentId = "1", Text = "Downloads" },
            }
        },
        new CustomItem
        {
            Id = "2",
            Text = "Libraries",
            Expanded = false,
            Items = new()
            {
                new CustomItem
                {
                    Id = "21",
                    ParentId = "2",
                    Text = "Documents",
                    Expanded = false,
                    Items = new()
                    {
                        new CustomItem { Id = "211", ParentId = "21", Text = "My Documents" },
                        new CustomItem { Id = "212", ParentId = "21", Text = "Public Documents" },
                    }
                },
                new CustomItem { Id = "22", ParentId = "2", Text = "Music" },
                new CustomItem { Id = "23", ParentId = "2", Text = "Pictures" },
                new CustomItem { Id = "24", ParentId = "2", Text = "Videos" },
           }
        },
        new CustomItem
        {
            Id = "3",
            Icon = "pc",
            Text = "Computer",
            Items = new()
            {
                new CustomItem { Id = "31", ParentId = "3", Text = "Local Disk (C:)" },
                new CustomItem { Id = "32", ParentId = "3", Text = "Storage (D:)" },
            }
        },
        new CustomItem { Id = "4", Text = "Network" },
        new CustomItem { Id = "5", Text = "Recycle Bin" }
    };

    //
    // Event List settings
    //

    public class DDEventItem
    {
        public string? Id { get; set; }
        public bool Cancelled { get; set; } = false;
        public int Count { get; set; } = 0;
        public string? Info { get; set; }
        public int Position { get; set; } = 0;
        public string? Name { get; set; }
        public object? Target { get; set; }
    }

    private IntegralUIList<DDEventItem>? evList;
    public List<DDEventItem> evItems = new();

    // Clear Button

    private void clearEventLog()
    {
        evItems.Clear();
        evList?.UpdateLayout();
    }

    // Events -----------------------------------------------------------------------------------------------------------------

    DDEventItem currentEvent = new();

    private void treeDragStart(IntegralUIDragEventArgs e)
    {
        updateCurrentEvent(e, "DragStart", true);

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when dragging of " + item?.Text + " starts";
        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout(true);
    }

    private void treeDragEnter(IntegralUIDragEventArgs e)
    {
        treeId = "treeview-dragenter";

        updateCurrentEvent(e, "DragEnter");

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when " + item?.Text + " enters the component space";

        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout(true);
    }

    private void treeDragOver(IntegralUIDragEventArgs e)
    {
        treeId = "treeview-dragenter";
        updateCurrentEvent(e, "DragOver");

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when " + item?.Text + " is dragged over ";

        if (currentEvent.Target is not null)
            currentEvent.Info += "target: " + ((CustomItem?)currentEvent.Target)?.Text;
        else
            currentEvent.Info += "component space";

        if (currentEvent.Count == 0)
            evItems.Insert(0, currentEvent);
        else
            evItems[0].Count = currentEvent.Count;

        evList?.UpdateLayout(true);
    }

    private void treeDragLeave(IntegralUIDragEventArgs e)
    {
        treeId = string.Empty;
        updateCurrentEvent(e, "DragLeave");

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when " + item?.Text + " leaves the component space";

        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout(true);
    }

    private void treeDragDrop(IntegralUIDragEventArgs e)
    {
        updateCurrentEvent(e, "DragDrop");

        CustomItem? item = (CustomItem?)e.Data;

        if (e.Action == "copy")
            currentEvent.Info = "fired when a COPY of " + item?.Text + " drops over ";
        else
            currentEvent.Info = "fired when " + item?.Text + " drops over ";

        if (currentEvent.Target is not null)
            currentEvent.Info += "target: " + ((CustomItem?)currentEvent.Target)?.Text;
        else
            currentEvent.Info += "component space";

        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout(true);
    }

    private void treeDragEnd(IntegralUIDragEventArgs e)
    {
        treeId = string.Empty;
        updateCurrentEvent(e, "DragEnd", true);

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when drag drop ends";

        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout();
    }

    private void updateCurrentEvent(IntegralUIDragEventArgs e, string name)
    {
        updateCurrentEvent(e, name, false);
    }

    private void updateCurrentEvent(IntegralUIDragEventArgs e, string name, bool skip)
    {
        int count = currentEvent.Count;

        if (name == currentEvent.Name)
        {
            if (e.Target is not null)
            {
                if (EqualityComparer<object>.Default.Equals(e.Target, currentEvent.Target))
                {
                    if (e.DropPos == currentEvent.Position)
                        count++;
                    else
                        count = 0;
                }
                else {
                    count = 0;
                }
            }
            else if (e.DropPos == currentEvent.Position)
                count++;
            else
                count = 0;
        }
        else
            count = 0;

        currentEvent = new()
        {
            Count = count,
            Name = name,
            Position = !skip ? e.DropPos : -1,
            Target = e.Target
        };
    }

    // Styling ---------------------------------------------------------------------------------------------------------------

    private string getIconClass(CustomItem? item)
    {
        string className = "trw-ddev-icons";

        if (item is not null)
        {
            if (item.Items.Count > 0)
                className += item.Expanded ? " expanded" : " collapsed";
            else
                className += " document";
        }

        return className;
    }

    private string getTreeId()
    {
        string idValue = string.Empty;

        if (!string.IsNullOrEmpty(treeId))
            idValue = $"{treeId}";
        else
            idValue = "treeview-dragdrop-events";

        return idValue;
    }

}
