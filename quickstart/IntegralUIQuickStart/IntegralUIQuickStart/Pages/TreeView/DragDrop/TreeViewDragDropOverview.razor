@page "/treeview/dragdrop/overview"

<link rel="stylesheet" href="css/treeview/dragdrop/TreeViewDragDropOverview.css?version=24.3.0" />

<h2>TreeView / Drag Drop Overview</h2>
<div class="sample-block">
    <IntegralUITreeView @ref=treeRef Id="treeview-dragdrop-overview" TItem="CustomItem"
        AllowDrag="@allowDrag"
        AllowDrop="@allowDrop"
        CheckBoxes="true"
        CheckMode="IntegralUICheckMode.ThreeState"
        Items="@items"
        MouseWheelSpeed="IntegralUISpeedMode.VerySlow"
        SelectionMode="@IntegralUISelectionMode.MultiExtended"
        Size="@ctrlSize">
        <ItemTemplate>
            <span class="@getIconClass(@context.Item)"></span>
            <span class="trw-ddovw-item-label">@context.Item?.Text</span>
        </ItemTemplate>
    </IntegralUITreeView>
    <div class="sample-block-ddlb-control-panel">
        <IntegralUICheckBox @bind-Checked="@allowDrag">Allow Drag</IntegralUICheckBox>
        <IntegralUICheckBox @bind-Checked="@allowDrop">Allow Drop</IntegralUICheckBox>
    </div>
    <div class="feature-help">
        <p><span class="initial-space"></span>In this sample you can drag drop items within the TreeView. During drag and drop a window with a list of dragged items appears and while dragging it all other items will move making space where item(s) can drop. In addition, you can create an item copy by holding the SHIFT key when dropped.</p>
        <br/>
        <p><span class="initial-space"></span>By clicking on check boxes, you can change the built-in properties:</p>
        <ul class="feature-points">
            <li><span class="code-name">AllowDrag</span> - determines whether items can be dragged</li>
            <li><span class="code-name">AllowDrop</span> - determines whether items can be dropped</li>
        </ul>
        <p><span class="initial-space"></span>Each item also has these properties, which allows you to determine on individual level which item(s) are draggable. To simplyfy the example, this option is excluded in the demo.</p>
    </div>
</div>

@code {
    private IntegralUITreeView<CustomItem>? treeRef;

    public class CustomItem
    {
        public IntegralUICheckState CheckState { get; set; } = IntegralUICheckState.Unchecked;
        public bool Expanded { get; set; } = true;
        public string? Id { get; set; }
        public string? Icon { get; set; }
        public List<CustomItem> Items { get; set; } = [];
        public string? ParentId { get; set; }
        public bool Selected { get; set; } = false;
        public string? Text { get; set; }
    }

    public IntegralUISize ctrlSize = new() { Width = 400, Height = 400 };
    public string currentGroupBy = "";

    public List<CustomItem> items = new()
    {
        new CustomItem
        {
            Id = "1",
            Text = "Favorites",
            Items = new()
            {
                new CustomItem { Id = "11", ParentId = "1", Text = "Desktop" },
                new CustomItem { Id = "12", ParentId = "1", Text = "Downloads", CheckState = IntegralUICheckState.Checked },
            }
        },
        new CustomItem
        {
            Id = "2",
            Text = "Libraries",
            Expanded = false,
            Items = new()
            {
                new CustomItem
                {
                    Id = "21",
                    ParentId = "2",
                    Text = "Libraries",
                    Expanded = false,
                    Items = new()
                    {
                        new CustomItem { Id = "211", ParentId = "21", Text = "My Documents", CheckState = IntegralUICheckState.Checked },
                        new CustomItem { Id = "212", ParentId = "21", Text = "Public Documents" },
                    }
                },
                new CustomItem { Id = "22", ParentId = "2", Text = "Music" },
                new CustomItem { Id = "23", ParentId = "2", Text = "Pictures" },
                new CustomItem { Id = "24", ParentId = "2", Text = "Videos" },
           }
        },
        new CustomItem
        {
            Id = "3",
            Icon = "pc",
            Text = "Computer",
            Items = new()
            {
                new CustomItem { Id = "31", ParentId = "3", Text = "Local Disk (C:)", CheckState = IntegralUICheckState.Checked },
                new CustomItem { Id = "32", ParentId = "3", Text = "Storage (D:)", CheckState = IntegralUICheckState.Checked },
            }
        },
        new CustomItem { Id = "4", Text = "Network" },
        new CustomItem { Id = "5", Text = "Recycle Bin" }
    };

    // Control PaneL
    public bool allowDrag = true;
    public bool allowDrop = true;

    // Styling ---------------------------------------------------------------------------------------------------------------

    private string getIconClass(CustomItem? item)
    {
        string className = "trw-ddovw-icons";

        if (item is not null)
        {
            if (item.Items.Count > 0)
                className += item.Expanded ? " expanded" : " collapsed";
            else
                className += " document";
        }

        return className;
    }

}
