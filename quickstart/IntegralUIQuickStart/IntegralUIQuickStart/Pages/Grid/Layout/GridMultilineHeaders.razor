@page "/grid/layout/multiline-headers"

<link rel="stylesheet" href="css/grid/layout/GridMultilineHeaders.css?version=24.3.0" />

<h2>Grid / Multi-line Headers</h2>
<div class="sample-block">
    <IntegralUIGrid @ref=gridRef Id="grid-multiline-headers" TModel="CustomData"
    DataSource="@rowList" 
    AutoSizeColumns="false" 
    ShowFooter="false"
    Size="@ctrlSize"
    ColumnClick="@gridColumnClick">
        <Columns>
            <IntegralUIGridColumn Field="OrderID" HeaderText="ID" Width="120" FixedWidth="true"></IntegralUIGridColumn>
            <IntegralUIGridColumn Field="Customer" HeaderText="Customer" Width="300"></IntegralUIGridColumn>
            <IntegralUIGridColumn HeaderText="Order Details" AllowSort="false">
                <Columns>
                    <IntegralUIGridColumn HeaderText="Product" AllowSort="false">
                        <Columns>
                            <IntegralUIGridColumn Field="ProductName" HeaderText="Name" Width="200"></IntegralUIGridColumn>
                            <IntegralUIGridColumn Field="Quantity" HeaderText="Qty" FormatSpecifier="N0" ContentAlignment="IntegralUIHorizontalAlignment.Right" Width="100"></IntegralUIGridColumn>
                            <IntegralUIGridColumn Field="Price" HeaderText="Price" FormatSpecifier="C2" ContentAlignment="IntegralUIHorizontalAlignment.Right" Width="120"></IntegralUIGridColumn>
                        </Columns>
                    </IntegralUIGridColumn>
                    <IntegralUIGridColumn HeaderText="Shipping Info" AllowSort="false">
                        <Columns>
                            <IntegralUIGridColumn Field="Delivery" HeaderText="Delivery" AllowSort="false" ContentAlignment="IntegralUIHorizontalAlignment.Center" Width="180"></IntegralUIGridColumn>
                            <IntegralUIGridColumn Field="Cost" HeaderText="Cost" FormatSpecifier="C2" ContentAlignment="IntegralUIHorizontalAlignment.Right" Width="120"></IntegralUIGridColumn>
                            <IntegralUIGridColumn Field="OrderDate" HeaderText="Date" FormatSpecifier="dd MMM yyyy" ContentAlignment="IntegralUIHorizontalAlignment.Center" Width="150"></IntegralUIGridColumn>
                        </Columns>
                    </IntegralUIGridColumn>
                </Columns>
            </IntegralUIGridColumn>
        </Columns>
        <Styles>
            <IntegralUIStyle TargetType="IntegralUITargetType.Header" ConditionValue="@parentHeaderStyle" Value="@("Order Details")" State="IntegralUIObjectState.All" Background="#406585" BorderColor="#406585" Color="white"></IntegralUIStyle>
            <IntegralUIStyle TargetType="IntegralUITargetType.Header" ConditionValue="@parentHeaderStyle" Value="@("Product")" State="IntegralUIObjectState.All" Background="#568cba" BorderColor="#568cba" Color="white"></IntegralUIStyle>
            <IntegralUIStyle TargetType="IntegralUITargetType.Header" ConditionValue="@parentHeaderStyle" Value="@("Shipping Info")" State="IntegralUIObjectState.All" Background="#53a5b5" BorderColor="#53a5b5" Color="white"></IntegralUIStyle>
            <IntegralUIStyle TargetType="IntegralUITargetType.Row" ConditionIndex="@evenOddStyle" Background="#f9f9f9"></IntegralUIStyle>
        </Styles>
    </IntegralUIGrid>
    <div class="feature-help">
        <p><span class="initial-space"></span>This example shows a grid with order details. The first three columns have only one header, while the 'Order Details' column is separated in multiple sub-columns, three header levels in total. There are two child columns 'Product' and 'Shipping Info' with their own child columns.</p>
        <p><span class="initial-space"></span>If you set <strong>AutoSizeColumns</strong> property to true, all columns will adjust their width to fill the whole grid space. In this case, the space will evenly divide between all parent and child columns.</p>
        <p><span class="initial-space"></span>Initially, data is sorted by 'Price' column. You can sort the Grid data by clicking on column header. Only last child columns are sortable. In addition, the 'Delivery' column is not sortable, because of custom object value, which requires creating of custom sorting using a Comparer class.</p>
        <p><span class="initial-space"></span>In addition, headers of parent columns have different colors. This is done through <strong>dynamic styling</strong>, where based on HeaderText property value a style is applied to target column header. There is no limit on how many different styles you can apply for the same or different objects, only the order of applied styles is important, from first to last. The last style for the same object will override any previous ones.</p>
    </div>
</div>

@code {

    // Data
    private enum DeliveryOptions
    {
        None,
        DeliveryTruck,
        RegularAir,
        ExpressAir
    }

    private class CustomData
    {
        public string? OrderID { get; set; }
        public string? Customer { get; set; }
        public string? ProductName { get; set; }
        public int Quantity { get; set; }
        public double Price { get; set; }
        public double Cost { get; set; }
        public DeliveryOptions Delivery { get; set; } = DeliveryOptions.None;
        public DateTime OrderDate { get; set; } = DateTime.Today;

        // State Properties
        public bool Selected { get; set; } = false;
    }

    private List<CustomData>? rowList = new()
    {
        new CustomData()
        {
            OrderID = "112",
            Customer = "Kevin MacIntyre",
            ProductName = "Eldon Base for stackable storage shelf, platinum",
            Quantity = 6,
            Price = 38.94,
            Cost = 35.00,
            Delivery = DeliveryOptions.RegularAir,
            OrderDate = new DateTime(2021, 9, 20)
        },
        new CustomData()
        {
            OrderID = "293",
            Customer = "Barry French",
            ProductName = "1.7 Cubic Foot Compact 'Cube' Office Refrigerators",
            Quantity = 49,
            Price = 208.16,
            Cost = 68.02,
            Delivery = DeliveryOptions.DeliveryTruck,
            OrderDate = new DateTime(2022, 2, 11)
        },
        new CustomData()
        {
            OrderID = "483",
            Customer = "Clay Rozendal",
            ProductName = "R380",
            Quantity = 30,
            Price = 195.99,
            Cost = 3.99,
            Delivery = DeliveryOptions.RegularAir,
            OrderDate = new DateTime(2023, 1, 17)
        },
        new CustomData()
        {
            OrderID = "534",
            Customer = "Alan Barnes",
            ProductName = "G.E. Longer-Life Indoor Recessed Floodlight Bulbs",
            Quantity = 21,
            Price = 6.64,
            Cost = 4.95,
            Delivery = DeliveryOptions.ExpressAir,
            OrderDate = new DateTime(2023, 3, 22)
        },
        new CustomData()
        {
            OrderID = "678",
            Customer = "Dorothy Badders",
            ProductName = "Xerox 198",
            Quantity = 37,
            Price = 4.98,
            Cost = 8.33,
            Delivery = DeliveryOptions.RegularAir,
            OrderDate = new DateTime(2023, 8, 19)
        },
        new CustomData()
        {
            OrderID = "643",
            Customer = "Monica Federle",
            ProductName = "SAFCO Commercial Wire Shelving, Black",
            Quantity = 21,
            Price = 138.14,
            Cost = 27.50,
            Delivery = DeliveryOptions.ExpressAir,
            OrderDate = new DateTime(2023, 6, 5)
        },
        new CustomData()
        {
            OrderID = "868",
            Customer = "Carlos Daly",
            ProductName = "Holmes HEPA Air Purifier",
            Quantity = 32,
            Price = 21.78,
            Cost = 5.94,
            Delivery = DeliveryOptions.RegularAir,
            OrderDate = new DateTime(2023, 7, 9)
        },
        new CustomData()
        {
            OrderID = "933",
            Customer = "Claudia Miner",
            ProductName = "Wilson Jones 1' Hanging DublLock® Ring Binders",
            Quantity = 15,
            Price = 5.28,
            Cost = 2.99,
            Delivery = DeliveryOptions.DeliveryTruck,
            OrderDate = new DateTime(2024, 4, 16)
        },
        new CustomData()
        {
            OrderID = "995",
            Customer = "Neola Schneider",
            ProductName = "Ultra Commercial Grade Dual Valve Door Closer",
            Quantity = 26,
            Price = 39.89,
            Cost = 3.04,
            Delivery = DeliveryOptions.RegularAir,
            OrderDate = new DateTime(2024, 5, 23)
        },
        new CustomData()
        {
            OrderID = "1154",
            Customer = "Sylvia Foulston",
            ProductName = "Hon 4-Shelf Metal Bookcases",
            Quantity = 44,
            Price = 100.98,
            Cost = 26.22,
            Delivery = DeliveryOptions.DeliveryTruck,
            OrderDate = new DateTime(2024, 11, 16)
        }
    };

    // General
    public IntegralUISize ctrlSize = new() { Height = 500 };

    // References
    private IntegralUIGrid<CustomData>? gridRef;

    // Sorting
    private IntegralUIDataColumn? prevSortColumn;
    private IntegralUISortOrder sorting = IntegralUISortOrder.None;

    // Initialization ---------------------------------------------------------------------------------------------------------

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && gridRef is not null)
        {
            gridRef.UpdateLayout();

            // Initially apply Sorting by Price in Ascending order
            IntegralUIDataColumn? column = gridRef.GetColumnByField("Price");
            if (column is not null)
            {
                column.Selected = true;
                column.Sorting = IntegralUISortOrder.Ascending;
                prevSortColumn = column;

                await gridRef.Sort(column, column.Sorting ?? IntegralUISortOrder.Ascending);
            }
        }
    }

    // Sorting ---------------------------------------------------------------------------------------------------------------

    private void gridColumnClick(IntegralUIDataColumn column)
    {
        if (column is not null && column.AllowSort)
        {
            // Only change the order if same column is clicked
            if (prevSortColumn is not null && !EqualityComparer<IntegralUIDataColumn>.Default.Equals(column, prevSortColumn))
            {
                prevSortColumn.Selected = false;
                column.Sorting = prevSortColumn.Sorting;
            }
            else
            {
                switch (column.Sorting)
                {
                    case IntegralUISortOrder.Ascending:
                        column.Sorting = IntegralUISortOrder.Descending;
                        break;

                    case IntegralUISortOrder.Descending:
                        column.Sorting = IntegralUISortOrder.None;
                        break;

                    default:
                        column.Sorting = IntegralUISortOrder.Ascending;
                        break;
                }
            }

            prevSortColumn = column;

            gridRef?.Sort(column, column.Sorting ?? IntegralUISortOrder.Ascending);
        }
    }

    // Styling ---------------------------------------------------------------------------------------------------------------

    private bool parentHeaderStyle(object? obj, object? value)
    {
        if (obj is not null && obj.GetType() == typeof(IntegralUIDataColumn))
        {
            IntegralUIDataColumn column = (IntegralUIDataColumn)obj;

            if (value is not null && value.GetType() == typeof(string) && column.HeaderText == Convert.ToString(value))
                return true;
        }

        return false;
    }

    private bool evenOddStyle(object? obj, int index)
    {
        return index % 2 == 1;
    }
}
