@page "/grid/grouping/overview"

@inject HttpClient Http

<link rel="stylesheet" href="css/grid/grouping/GridGroupingOverview.css?version=24.3.0" />

<h2>Grid / Grouping Overview</h2>
<div class="sample-block">
    <IntegralUIGrid @ref=gridRef Id="grid-grouping-overview" TModel="CustomData"
    DataGroups="@activeGroups"
    DataSource="@gridRows"
    Grouping="@groupingSettings" 
    Size="@ctrlSize"
    ColumnClick="@gridColumnClick"
    GroupAdded="@gridGroupAdded">
        <Columns>
            <IntegralUIGridColumn Field="Category" HeaderText="Category" HeaderAlignment="IntegralUIHorizontalAlignment.Center" Width="300"></IntegralUIGridColumn>
            <IntegralUIGridColumn Field="Year" HeaderText="Year" HeaderAlignment="IntegralUIHorizontalAlignment.Center" ContentAlignment="IntegralUIHorizontalAlignment.Center" Width="120"></IntegralUIGridColumn>
            <IntegralUIGridColumn Field="Country" HeaderText="Country" HeaderAlignment="IntegralUIHorizontalAlignment.Center" FooterText="Total" FooterAlignment="IntegralUIHorizontalAlignment.Center" Width="200"></IntegralUIGridColumn>
            <IntegralUIGridColumn Field="Quantity" Aggregation="@sumAggregation" AllowGrouping="false" FormatSpecifier="N0" HeaderText="Quantity" HeaderAlignment="IntegralUIHorizontalAlignment.Center" ContentAlignment="IntegralUIHorizontalAlignment.Right" FooterAlignment="IntegralUIHorizontalAlignment.Right" Width="120"></IntegralUIGridColumn>
            <IntegralUIGridColumn Field="Cost" Aggregation="@sumAggregation" AllowGrouping="false" FormatSpecifier="C2" HeaderText="Cost" HeaderAlignment="IntegralUIHorizontalAlignment.Center" ContentAlignment="IntegralUIHorizontalAlignment.Right" FooterAlignment="IntegralUIHorizontalAlignment.Right" Width="180"></IntegralUIGridColumn>
            <IntegralUIGridColumn Field="Total" Aggregation="@sumAggregation" AllowGrouping="false" FormatSpecifier="C2" HeaderText="Total" HeaderAlignment="IntegralUIHorizontalAlignment.Center" ContentAlignment="IntegralUIHorizontalAlignment.Right" FooterAlignment="IntegralUIHorizontalAlignment.Right" Width="250"></IntegralUIGridColumn>
        </Columns>
        <RowTemplate>
            @switch (context.Cell?.Field)
            {
                case "Category":
                    @if (context.Type == IntegralUIRowType.Group)
                    {
                        if (context.Cell?.GroupField == "Country")
                        {
                            <div style="display: inline-block">
                                <span class="grid-grouping-flags @(getCountryIcon((string?)context.DisplayValue))"></span>
                                <span class="grid-grouping-country">@context.DisplayValue</span>
                            </div>
                        }
                        else
                        {
                            <div class="grid-grouping-group-label">@context.DisplayValue</div>
                        }
                    }
                    break;

                case "Country":
                    <div>
                        <span class="grid-grouping-flags @(getCountryIcon((string?)context.Row?.Country))"></span>
                        <span class="grid-grouping-country">@context.Row?.Country</span>
                    </div>
                    break;

                default:
                    @if (context.Type == IntegralUIRowType.Group)
                    {
                        switch (context.Cell?.GroupField)
                        {
                            case "Category":
                                <div class="grid-grouping-group-summary" style="color: #8f47b3;">@context.DisplayValue</div>
                                break;

                            case "Country":
                                <div class="grid-grouping-group-summary" style="color: #64995a;">@context.DisplayValue</div>
                                break;

                            default:
                                <div class="grid-grouping-group-summary">@context.DisplayValue</div>
                                break;
                        }
                    }
                    else if (context.Type == IntegralUIRowType.Summary && !string.IsNullOrEmpty((string?)@context.DisplayValue))
                    {
                        <div class="grid-grouping-row-summary">@context.DisplayValue</div>
                    }
                    else
                    {
                        <div class="grid-grouping-cell-label">@context.DisplayValue</div>
                    }
                    break;
            }
        </RowTemplate>
        <Styles>
            <IntegralUIStyle TargetType="IntegralUITargetType.Row" ConditionIndex="@evenOddStyle" Background="#f9f9f9"></IntegralUIStyle>
        </Styles>
    </IntegralUIGrid>
    <div class="feature-help">
        <p><span class="initial-space"></span>An example of Grid where data is arranged dynamically by different groups.</p>
        <p><span class="initial-space"></span>Initially, there are two groups active, the 'Year' and 'Country' group. But you can change the groups from grouping panel by clicking on <strong>'Add Group' (+ icon)</strong> or removing active groups by clicking on delete button (x).</p>
        <p><span class="initial-space"></span>Depending on active groups in grouping panel, the Grid will arrange the data dynamically. The group header will display a summary value depending on choosen aggregation formula, the total value is calculated. When group is collapsed, the summary data will apppar within the group header under corresponding column.</p>
        <p><span class="initial-space"></span>Each group can also show a <strong>Summary</strong> field as bottom row at the end of each group, where summary value is shown based on selected aggregation function. You can customize the appearance of summary field within row template, in this example it is shown on blue background and white color with slightly increased font size.</p>
        <p><span class="initial-space"></span>Grouping is fully customizable, you can create your own aggregate functions, display data using custom templates for each cell, expand or sort all groups from within grouping panel and more.</p>
        <p><span class="initial-space"></span>Some columns like 'Quantity' and 'Cost' are excluded from grouping functionality. This is determined in sample code by setting the <span class="code-name">AllowGrouping</span> property of column object to <span class="code-lang">false</span>.</p>
        <p><span class="initial-space"></span>In addition, you can expand/collapse whole groups or sort them using buttons from grouping panel. You can also sort Grid data by clicking on column header.</p>
    </div>
</div>

@code {

    // General
    public IntegralUISize ctrlSize = new() { Height = 550 };

    private class CustomData
    {
        public string? Category { get; set; }
        public double Cost { get; set; }
        public string? Country { get; set; }
        public string? Icon { get; set; }
        public int Quantity { get; set; }
        public double Total { get; set; }
        public int Year { get; set; }

        // State Properties
        public bool Expanded { get; set; } = false;
        public bool Selected { get; set; } = false;
    }

    private List<CustomData> gridRows = [];

    // Grouping
    private IntegralUIAggregation? sumAggregation = new() { Formula = IntegralUIAggregationFormula.SUM };

    private List<IntegralUIDataGroup> activeGroups = new()
    {
        new()
        {
            Field = "Year",
            ShowExpandBox = true,
            ShowSorting = true,
            ShowSummary = true,
            Sorting = IntegralUISortOrder.Ascending
        },
        new()
        {
            Field = "Country",
            ShowExpandBox = true,
            ShowSorting = true,
            ShowSummary = false
         }
    };

    private IntegralUIGridGrouping groupingSettings = new()
        {
            Enabled = true,
            ExpandBox = true,
            ShowColumns = true,
            Sorting = true,
            Summary = false
        };

    // References
    private IntegralUIGrid<CustomData>? gridRef;

    // Sorting
    private IntegralUIDataColumn? prevSortColumn;
    private IntegralUISortOrder sorting = IntegralUISortOrder.None;

    // Initialization ---------------------------------------------------------------------------------------------------------

    protected override async Task OnInitializedAsync()
    {
        //Get the data from the grid-commodities.json file
        List<CustomData>? data = await Http.GetFromJsonAsync<List<CustomData>>("data/grid-commodities.json?v3");

        if (data is not null)
        {
            gridRows = data;
            StateHasChanged();

            // Update Total value for each row based on Quantity and Price
            foreach (CustomData obj in gridRows)
                obj.Total = obj.Quantity * obj.Cost;

            if (gridRef is not null)
            {
                await gridRef.UpdateLayoutAsync();

                // Initially apply Sorting by Country in Descending order
                IntegralUIDataColumn? column = gridRef.GetColumnByField("Country");
                if (column is not null)
                {
                    column.Selected = true;
                    column.Sorting = IntegralUISortOrder.Descending;
                    prevSortColumn = column;

                    await gridRef.Sort(column, column.Sorting ?? IntegralUISortOrder.Ascending);
                }
            }

            updateFooter();
        }
    }

    // Data ------------------------------------------------------------------------------------------------------------------

    private string? getCountryIcon(string? country)
    {
        string? retValue = country?.ToLower();

        switch (retValue)
        {
            case "south korea":
                retValue = "south-korea";
                break;

            case "united kingdom":
                retValue = "uk";
                break;

            case "united states":
                retValue = "usa";
                break;
        }

        return retValue;
    }

    // Grouping --------------------------------------------------------------------------------------------------------------

    private void gridGroupAdded(IntegralUIDataGroup group)
    {
        if (group.Field == "Year")
        {
            group.ShowSummary = true;

            gridRef?.UpdateLayout();
        }
    }

    // Footer ----------------------------------------------------------------------------------------------------------------

    private void updateFooter()
    {
        if (gridRef is not null)
        {
            updateFooterValue("Quantity");
            updateFooterValue("Cost");
            updateFooterValue("Total");

            gridRef.UpdateLayout();
        }
    }

    private void updateFooterValue(string field)
    {
        IntegralUIDataColumn? column = gridRef?.GetColumnByField(field);

        if (column is not null)
        {
            double summary = 0;

            foreach (CustomData row in gridRows)
            {
                var property = row.GetType().GetProperty(field);
                if (property is not null && (property.PropertyType == typeof(double) || property.PropertyType == typeof(int)))
                    summary += Convert.ToDouble(property?.GetValue(row));
            }

            if (summary > 0)
                column.FooterValue = summary;
        }
    }

    // Sorting ---------------------------------------------------------------------------------------------------------------

    private void gridColumnClick(IntegralUIDataColumn? column)
    {
        if (column is not null)
        {
            // Only change the order if same column is clicked
            if (prevSortColumn is not null && !EqualityComparer<IntegralUIDataColumn>.Default.Equals(column, prevSortColumn))
            {
                prevSortColumn.Selected = false;
                column.Sorting = prevSortColumn.Sorting;
            }
            else
            {
                switch (column.Sorting)
                {
                    case IntegralUISortOrder.Ascending:
                        column.Sorting = IntegralUISortOrder.Descending;
                        break;

                    case IntegralUISortOrder.Descending:
                        column.Sorting = IntegralUISortOrder.None;
                        break;

                    default:
                        column.Sorting = IntegralUISortOrder.Ascending;
                        break;
                }
            }

            prevSortColumn = column;

            gridRef?.Sort(column, column.Sorting ?? IntegralUISortOrder.Ascending);
        }
    }

    // Styling ---------------------------------------------------------------------------------------------------------------

    private bool evenOddStyle(object? obj, int index)
    {
        return index % 2 == 1;
    }
}
