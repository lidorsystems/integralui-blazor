@page "/listbox/layout/templates"

<link rel="stylesheet" href="css/listbox/layout/ListBoxTemplates.css?version=24.3.0" />

<h2>ListBox / Templates</h2>
<div class="sample-block">
    <IntegralUIListBox @ref=listRef Id="listbox-templates" TItem="ListItem"
        Items="@items"
        MouseWheelSpeed="IntegralUISpeedMode.VerySlow"
        Size="@ctrlSize">
        <ItemTemplate>
            <div class="lbox-lyttmp-item-content" @onmousedown="@((e) => itemMouseDown(e, @context.Item))">
                <table width="100%">
                    <tr>
                        <td rowspan="99"><span class="@getIconClass(@context.Item)"></span></td>
                        <td width="75%"><span class="lbox-lyttmp-label">@context.Item?.Title</span></td>
                        <td class="lbox-lyttmp-date" width="25%">@getDateString(@context.Item)</td>
                    </tr>
                    <tr>
                        <td width="75%"><span class="lbox-lyttmp-subtext">@context.Item?.SubTitle</span></td>
                        <td class="lbox-lyttmp-time" width="25%">@getTimeString(@context.Item)</td>
                    </tr>
                    @if (context.Item is not null && context.Item.IsOpen && context.Item.Messages.Length > 0)
                    {
                        <tr style="@getMessagesStyle(@context.Item)"><td colspan="2"><hr /></td></tr>
                        <tr style="@getMessagesStyle(@context.Item)">
                            <td colspan="2">
                                @foreach (var message in context.Item.Messages)
                                {
                                    @message<br/>
                                }
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </ItemTemplate>
    </IntegralUIListBox>
    <div class="feature-help">
        <p><span class="initial-space"></span>An example of ListBox component where templates are used to add custom HTML content in item space. Each item contains different HTML elements that present information about particular conversation.</p>
        <p><span class="initial-space"></span>In this example, some items have messages hidden from view. To show them, click on the item, the content space will expand showing the messages related to that item. If item has an <strong>envelope icon</strong>, it will change to an open or closed envelope.</p>
        <p><span class="initial-space"></span>Templates are fully customizable via CSS and you can add any custom actions to template elements.</p>
    </div>
</div>

@code {
    private IntegralUIListBox<ListItem>? listRef;

    public class ListItem
    {
        public DateTime Date { get; set; }
        public string? Icon { get; set; }
        public bool IsOpen { get; set; } = false;
        public string[] Messages { get; set; } = [];
        public string? SubTitle { get; set; }
        public bool Selected { get; set; } = false;
        public string? Title { get; set; }
    }

    public IntegralUISize ctrlSize = new() { Width = 500, Height = 350 };
    public string currentGroupBy = "";
    public IntegralUIComponentAppearance currentScrollAppearance = IntegralUIComponentAppearance.Static;

    public List<ListItem> items = new()
    {
        new ListItem { Icon = "phone", Title = "Missed Call From Peter Goodman", SubTitle = "Re: Urgent! Help needed?", Date = new DateTime(2024, 8, 23, 15, 6, 0) },
        new ListItem { Icon = "phone", Title = "From Peter Goodman", SubTitle = "Duration 2:15 minutes", Messages = ["Notes: Order is placed"], Date = new DateTime(2024, 8, 23, 13, 17, 0) },
        new ListItem { Icon = "notes", Title = "To Peter Goodman", SubTitle = "Re: Urgent! Help needed?", Messages = ["To: You got the price for this new stock?", "From: Hold on", "From: I can't find it. It will take me some ti..."], Date = new DateTime(2024, 8, 23, 7, 40, 0) },
        new ListItem { Icon = "envelope", Title = "To Frank Anderson", SubTitle = "Re: USA stock market", Messages = ["... Suggest yo contact Peter concerning the USA stock market. He is an expert in this field and it will give you the right info..."], Date = new DateTime(2024, 8, 23, 7, 15, 0) },
        new ListItem { Icon = "phone", Title = "From Peter Goodman", SubTitle = "Duration 1:47 minutes", Messages = ["Notes: We need to purchase a 100,000 shares from this new stock.", "Need more information"], Date = new DateTime(2024, 8, 22, 17, 34, 0) },
        new ListItem { Icon = "phone", Title = "To Peter Goodman", SubTitle = "Duration 7:32 minutes", Messages = ["Notes: We need to purchase a 100,000 shares from this new stock."], Date = new DateTime(2024, 8, 22, 10, 23, 0) },
        new ListItem { Icon = "envelope", Title = "To Peter Goodman", SubTitle = "Urgent! Help needed", Date = new DateTime(2024, 8, 22, 8, 25, 0) }
    };

    // Data -------------------------------------------------------------------------------------------------------------------

    private string getDateString(ListItem? item)
    {
        if (item is not null)
            return item.Date.ToString("dddd, dd MMM", System.Globalization.CultureInfo.InvariantCulture);

        return string.Empty;
    }

    private string getTimeString(ListItem? item)
    {
        if (item is not null)
            return item.Date.ToString("hh:mm tt", System.Globalization.CultureInfo.CreateSpecificCulture("en-US"));

        return string.Empty;
    }

    // Events -----------------------------------------------------------------------------------------------------------------

    private void itemMouseDown(MouseEventArgs e, ListItem? item)
    {
        if (e.Buttons == 1 && item is not null)
            item.IsOpen = !item.IsOpen;
    }

    // Styling ----------------------------------------------------------------------------------------------------------------

    private string getIconClass(ListItem? item)
    {
        string className = "lbox-lyttmp-icons";

        if (item is not null)
        {
            if (!string.IsNullOrEmpty(item.Icon))
                className += $" {item.Icon.ToLower()}";
            if (item.IsOpen && item.Icon == "envelope")
                className += " envelope-open";
        }

        return className;
    }

    private string getMessagesStyle(ListItem? item)
    {
        return item is not null && item.IsOpen ? "display: table-row" : "display: none";
    }

}
