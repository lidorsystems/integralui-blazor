@page "/listbox/dragdrop/events"

<link rel="stylesheet" href="css/listbox/dragdrop/ListBoxDragDropEvents.css?version=24.3.0" />

<h2>ListBox / Drag Drop Events</h2>
<div class="sample-block">
    <div class="sample-block-listbox-dragdrop-events">
        <IntegralUIListBox Id="listbox-dragdrop-events" TItem="CustomItem"
            AllowDrag="true"
            AllowDrop="true"
            Items="@items"
            MouseWheelSpeed="IntegralUISpeedMode.VerySlow"
            DragStart="@listDragStart"
            DragEnter="@listDragEnter"
            DragOver="@listDragOver"
            DragLeave="@listDragLeave"
            DragDrop="@listDragDrop"
            DragEnd="@listDragEnd">
        </IntegralUIListBox>
        <div class="sample-event-block">
            <IntegralUIButton Id="listbox-dragdrop-events-button" AllowFocus="false" Click="@clearEventLog">Clear</IntegralUIButton>
            <p>Event log:</p>
            <IntegralUIList @ref=evList Id="list-dragdrop-events-log" TItem="DDEventItem"
                AllowFocus="false"
                Items="@evItems"
                MouseWheelSpeed="IntegralUISpeedMode.VerySlow">
                <ItemTemplate>
                    <div>
                        @if (@context.Item?.Count > 0)
                        {
                            <span class="sample-event-count">@context.Item.Count</span>
                        }
                        <span class="sample-event-name">@context.Item?.Name</span>
                        @if (@context.Item is not null && @context.Item.Cancelled)
                        {
                            <span class="sample-event-cancelled"> cancelled</span>
                        }
                    </div>
                    <div>
                        @context.Item?.Info
                        @if (@context.Item?.Position > 0)
                        {
                            <span class="sample-event-value"> at position: @context.Item.Position</span>
                        }
                    </div>
                </ItemTemplate>
            </IntegralUIList>
        </div>
    </div>
    <div class="feature-help">
        <p><span class="initial-space"></span>In this demo, you are free to drag and drop items one by one within the ListBox. When item is dragged over a different item, you can drop it above or below the target item. In this particular example, you cannot drop items above or below the <strong><i>"Gladiator"</i></strong> item, the above and below positions are disabled within the <strong>DragOver</strong> event handler. To create an item copy, press and hold the SHIFT key when item drops.</p>
        <p><span class="initial-space"></span>To see which event is fired and in what order, the list on right logs all drag and drop events that occur, from newest to the oldest event fired. The list shows event name, information about the source and target item, position and how many times the event fires.</p>
        <p><span class="initial-space"></span>Here is a list of available drag and drop events:</p>
        <ul class="feature-points">
            <li><span class="code-name">DragEnd</span> - occurs when drag and drop ends over ListBox space</li>
            <li><span class="code-name">DragEnter</span> - occurs when item is dragged over ListBox space for the first time</li>
            <li><span class="code-name">DragDrop</span> - occurs when item drops within the ListBox</li>
            <li><span class="code-name">DragLeave</span> - occurs when dragged item leaves the ListBox space</li>
            <li><span class="code-name">DragOver</span> - occurs when item is dragged over other items and ListBox space</li>
            <li><span class="code-name">DragStart</span> - occurs  when drag and drop starts over ListBox space</li>
        </ul>
    </div>
</div>

@code {

    public class CustomItem
    {
        public string? Id { get; set; }
        public string? Genre { get; set; }
        public double Rating { get; set; }
        public bool Selected { get; set; } = false;
        public string? Text { get; set; }
        public int Year { get; set; }
    }

    public List<CustomItem> items = new()
    {
        new CustomItem { Id = "1", Genre = "Sci-Fi", Text = "Star Trek", Year = 2009, Rating = 8 },
        new CustomItem { Id = "2", Genre = "Adventure", Text = "Cast Away", Year = 2000, Rating = 7 },
        new CustomItem { Id = "3", Genre = "Action", Text = "Gladiator", Year = 2000, Rating = 8 },
        new CustomItem { Id = "4", Genre = "Drama", Text = "Malèna", Year = 2000, Rating = 7 },
        new CustomItem { Id = "5", Genre = "Music", Text = "Moulin Rouge", Year = 2001, Rating = 7 },
        new CustomItem { Id = "6", Genre = "Comedy", Text = "Snatch", Year = 2000, Rating = 8 },
        new CustomItem { Id = "7", Genre = "Biography", Text = "A Beautiful Mind", Year = 2001, Rating = 8 },
        new CustomItem { Id = "8", Genre = "Crime", Text = "Black Hawk Down", Year = 2001, Rating = 7 },
        new CustomItem { Id = "9", Genre = "Western", Text = "Django Unchained", Year = 2012, Rating = 8 },
        new CustomItem { Id = "10", Genre = "Sci-Fi", Text = "Man of Steel", Year = 2013, Rating = 7 },
        new CustomItem { Id = "11", Genre = "Horror", Text = "The Ring", Year = 2002, Rating = 7 },
        new CustomItem { Id = "12", Genre = "Romance", Text = "40 Days and 40 Nights", Year = 2002, Rating = 5 },
        new CustomItem { Id = "13", Genre = "Sci-Fi", Text = "Minority Report", Year = 2002, Rating = 7 },
        new CustomItem { Id = "14", Genre = "Comedy", Text = "Scary Movie 3", Year = 2003, Rating = 5 },
        new CustomItem { Id = "15", Genre = "Music", Text = "Walk the Line", Year = 2005, Rating = 7 },
        new CustomItem { Id = "16", Genre = "Romance", Text = "How to Lose a Guy in 10 Days", Year = 2003, Rating = 6 },
        new CustomItem { Id = "17", Genre = "Crime", Text = "The Dark Knight", Year = 2008, Rating = 9 },
        new CustomItem { Id = "18", Genre = "Horror", Text = "American Psycho", Year = 2000, Rating = 7 },
        new CustomItem { Id = "19", Genre = "Drama", Text = "The Grand Budapest Hotel", Year = 2014, Rating = 8 },
        new CustomItem { Id = "20", Genre = "Comedy", Text = "The Wolf of Wall Street", Year = 2013, Rating = 8 }
    };

    //
    // Event List settings
    //

    public class DDEventItem
    {
        public string? Id { get; set; }
        public bool Cancelled { get; set; } = false;
        public int Count { get; set; } = 0;
        public string? Info { get; set; }
        public int Position { get; set; } = 0;
        public string? Name { get; set; }
        public object? Target { get; set; }
    }

    private IntegralUIList<DDEventItem>? evList;
    public List<DDEventItem> evItems = new();

    // Clear Button

    private void clearEventLog()
    {
        evItems.Clear();
        evList?.UpdateLayout();
    }

    // Events -----------------------------------------------------------------------------------------------------------------

    DDEventItem currentEvent = new();

    private void listDragStart(IntegralUIDragEventArgs e)
    {
        updateCurrentEvent(e, "DragStart", true);

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when dragging of " + item?.Text + " starts";
        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout(true);
    }

    private void listDragEnter(IntegralUIDragEventArgs e)
    {
        updateCurrentEvent(e, "DragEnter");

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when " + item?.Text + " enters the component space";

        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout(true);
    }

    private void listDragOver(IntegralUIDragEventArgs e)
    {
        updateCurrentEvent(e, "DragOver");

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when " + item?.Text + " is dragged over ";

        if (currentEvent.Target is not null)
            currentEvent.Info += "target: " + ((CustomItem?)currentEvent.Target)?.Text;
        else
            currentEvent.Info += "component space";

        if (e.Target is not null)
        {
            CustomItem? targetItem = (CustomItem?)e.Target;
            if (targetItem?.Text == "Gladiator")
                e.Cancel = true;
            else if (targetItem?.Text == "Cast Away" && e.DropPos == 2)
                e.Cancel = true;
            else if (targetItem?.Text == "Malèna" && e.DropPos == 1)
                e.Cancel = true;
        }

        currentEvent.Cancelled = e.Cancel;

        if (currentEvent.Count == 0)
            evItems.Insert(0, currentEvent);
        else
            evItems[0].Count = currentEvent.Count;

        evList?.UpdateLayout(true);
    }

    private void listDragLeave(IntegralUIDragEventArgs e)
    {
        updateCurrentEvent(e, "DragLeave");

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when " + item?.Text + " leaves the component space";

        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout(true);
    }

    private void listDragDrop(IntegralUIDragEventArgs e)
    {
        e.Cancel = currentEvent.Cancelled;

        updateCurrentEvent(e, "DragDrop");

        CustomItem? item = (CustomItem?)e.Data;

        if (e.Action == "copy")
            currentEvent.Info = "fired when a COPY of " + item?.Text + " drops over ";
        else
            currentEvent.Info = "fired when " + item?.Text + " drops over ";

        if (currentEvent.Target is not null)
            currentEvent.Info += "target: " + ((CustomItem?)currentEvent.Target)?.Text;
        else
            currentEvent.Info += "component space";

        currentEvent.Cancelled = e.Cancel;

        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout(true);
    }

    private void listDragEnd(IntegralUIDragEventArgs e)
    {
        updateCurrentEvent(e, "DragEnd", true);

        CustomItem? item = (CustomItem?)e.Data;

        currentEvent.Info = "fired when drag drop ends";

        evItems.Insert(0, currentEvent);
        evList?.UpdateLayout();
    }

    private void updateCurrentEvent(IntegralUIDragEventArgs e, string name)
    {
        updateCurrentEvent(e, name, false);
    }

    private void updateCurrentEvent(IntegralUIDragEventArgs e, string name, bool skip)
    {
        int count = currentEvent.Count;

        if (name == currentEvent.Name)
        {
            if (e.Target is not null)
            {
                if (EqualityComparer<object>.Default.Equals(e.Target, currentEvent.Target))
                {
                    if (e.DropPos == currentEvent.Position)
                        count++;
                    else
                        count = 0;
                }
                else {
                    count = 0;
                }
            }
            else if (e.DropPos == currentEvent.Position)
                count++;
            else
                count = 0;
        }
        else
            count = 0;

        currentEvent = new()
        {
            Count = count,
            Name = name,
            Position = !skip ? e.DropPos : -1,
            Target = e.Target
        };
    }
}
